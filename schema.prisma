generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

datasource db {
    provider             = "mysql"
    url                  = env("DATABASE_URL")
    shadowDatabaseUrl    = env("SHADOW_DATABASE_URL")
    referentialIntegrity = "prisma"
}

enum Status {
    ACTIVE
    INCOMPLETE
    COMPLETE
}

model Contributors {
    user            String
    userId          Int        @id
    commits         Int
    avatarUrl       String
    deletions       Int
    additions       Int
    RaidStats       RaidStats? @relation(fields: [raidStatsRaidId], references: [raidId])
    raidStatsRaidId String?
    Files           Files?     @relation(fields: [filesUrl], references: [url])
    filesUrl        String?
}

model RaidStats {
    raidId       String         @id @unique
    status       Status
    dungeon      String
    title        String
    duration     Int? // diff createdAt & completedAt
    contributors Contributors[]
    changedFiles Int
    createdAt    DateTime
    completedAt  DateTime?
    deletions    Int
    additions    Int
    commits      Int
    files        Files[]
}

model Files {
    url             String         @id @unique
    fileName        String
    deletions       Int
    contributors    Contributors[]
    RaidStats       RaidStats?     @relation(fields: [raidStatsRaidId], references: [raidId])
    raidStatsRaidId String?
}

// Auth Form Stuff
model Account {
    id                 String  @id @default(cuid())
    userId             String
    type               String
    provider           String
    providerAccountId  String
    refresh_token      String?
    access_token       String?
    expires_at         Int?
    token_type         String?
    scope              String?
    id_token           String?
    session_state      String?
    oauth_token_secret String?
    oauth_token        String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
