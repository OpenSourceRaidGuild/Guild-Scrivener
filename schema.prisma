generator client {
    provider        = "prisma-client-js"
}

datasource db {
    provider             = "mysql"
    url                  = env("DATABASE_URL")
    shadowDatabaseUrl    = env("SHADOW_DATABASE_URL")
    relationMode = "prisma"
}

enum Status {
    ACTIVE
    INCOMPLETE
    COMPLETE
}

// RaidStats created for each raid, many contributors related, many files related
model RaidStats {
    raidId           String             @unique
    status           Status
    dungeon          String
    title            String
    duration         Int? // diff createdAt & completedAt
    changedFiles     Int
    createdAt        DateTime
    completedAt      DateTime?
    deletions        Int
    additions        Int
    commits          Int
    files            Files[]
    RaidContribution RaidContribution[]
}

// create normalized model for Contributors & RaidStats
model RaidContribution {
    raidId      String       @unique
    userId      Int
    deletions   Int
    additions   Int
    commits     Int
    filesUrl    String?
    contributor Contributors @relation(fields: [userId], references: [userId])
    raid        RaidStats    @relation(fields: [raidId], references: [raidId], onDelete: Cascade)
    // Files       Files?       @relation(fields: [filesUrl], references: [raidStatsRaidId])

    @@index([userId])
}

// contributor/user only 1 created for each user
model Contributors {
    user             String
    userId           Int                @unique
    avatarUrl        String
    RaidContribution RaidContribution[]
}

// Files created for each raid, many RaidStats related, many contributors related
model Files {
    url             String     @unique
    fileName        String
    RaidStats       RaidStats? @relation(fields: [raidStatsRaidId], references: [raidId], onDelete: Cascade)
    raidStatsRaidId String
    // contributors    RaidContribution[]

    @@index([raidStatsRaidId])
}

// Auth Form Stuff
model Account {
    id                 String  @id @default(cuid())
    userId             String
    type               String
    provider           String
    providerAccountId  String
    refresh_token      String?
    access_token       String?
    expires_at         Int?
    token_type         String?
    scope              String?
    id_token           String?
    session_state      String?
    oauth_token_secret String?
    oauth_token        String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
